# # Use the latest 2.1 version of CircleCI pipeline process engine.
# # See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# orbs:
#   # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
#   # Orbs reduce the amount of configuration required for common tasks.
#   # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
#   node: circleci/node@4.7

# jobs:
#   # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
#   build-and-test:
#     # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
#     # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
#     # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
#     docker:
#       - image: cimg/node:16.10
#     # Then run your tests!
#     # CircleCI will report the results back to your VCS provider.
#     steps:
#       # Checkout the code as the first step.
#       - checkout
#       # Next, the node orb's install-packages step will install the dependencies from a package.json.
#       # The orb install-packages step will also automatically cache them for faster future runs.
#       - node/install-packages:
#           # If you are using yarn, change the line below from "npm" to "yarn"
#           pkg-manager: npm
#       - run:
#           name: Run tests
#           command: npm test

# workflows:
#   # Below is the definition of your workflow.
#   # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
#   # CircleCI will run this workflow on every commit.
#   # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
#   sample:
#     jobs:
#       - build-and-test
#       # For running simple node tests, you could optionally use the node/test job from the orb to replicate and replace the job above in fewer lines.
#       # - node/test
jobs:
  build:
    docker:
      - image: cimg/node:16.10
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Show current branch
          command: echo ${CIRCLE_BRANCH}
      - restore_cache:
          keys:
            - app-{{ checksum "package.json" }}
            - app-
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          paths:
            - node_modules
          key: app-{{ checksum "package.json" }}

  deploy-to-aws-s3:
    docker:
      - image: cimg/node:16.10
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Show current branch
          command: echo ${CIRCLE_BRANCH}
      - run:
          name: Installing AWS CLI
          command: |
            sudo apt-get -y -qq update
            sudo apt-get install -y awscli
            sudo apt-get install -y python3-pip python-dev build-essential
      - run:
          name: Build project
          command: |
            npm install
            npm run build
            cd build
            zip ../build.zip -r * .[^.]*
            echo "Build successful"
      - run:
          name: Deploy to AWS s3
          command: |
            aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
            aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
            if [ "${CIRCLE_BRANCH}" == "main" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_PRODUCTION_BUCKET} --delete
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_STAGING_BUCKET} --delete
            else
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_DEV_BUCKET} --delete
            fi

workflows:
  build_and_deploy:
    jobs:
      - build
      - deploy-to-aws-s3:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - main