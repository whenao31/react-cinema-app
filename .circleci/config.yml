# # Use the latest 2.1 version of CircleCI pipeline process engine.
# # See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# orbs:
#   # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
#   # Orbs reduce the amount of configuration required for common tasks.
#   # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
#   node: circleci/node@4.7

# jobs:
#   # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
#   build-and-test:
#     # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
#     # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
#     # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
#     docker:
#       - image: cimg/node:16.10
#     # Then run your tests!
#     # CircleCI will report the results back to your VCS provider.
#     steps:
#       # Checkout the code as the first step.
#       - checkout
#       # Next, the node orb's install-packages step will install the dependencies from a package.json.
#       # The orb install-packages step will also automatically cache them for faster future runs.
#       - node/install-packages:
#           # If you are using yarn, change the line below from "npm" to "yarn"
#           pkg-manager: npm
#       - run:
#           name: Run tests
#           command: npm test

# workflows:
#   # Below is the definition of your workflow.
#   # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
#   # CircleCI will run this workflow on every commit.
#   # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
#   sample:
#     jobs:
#       - build-and-test
#       # For running simple node tests, you could optionally use the node/test job from the orb to replicate and replace the job above in fewer lines.
#       # - node/test

executors:
  app-executor:
    docker:
      - image: cimg/node:16.10
    working_directory: ~/repo
  terraform-executor:
    docker:
      - image: hashicorp/terraform:latest

aliases:
  - &show_current_branch
    run:
      name: Show current branch
      command: echo ${CIRCLE_BRANCH}
  - &restore_cache
    restore_cache:
      keys:
        - app-{{ checksum "package.json" }}
        - app-
  - &install_dependencies
    run:
      name: Install dependencies
      command: npm install
  - &save_cache
    save_cache:
      paths:
        - node_modules
      key: app-{{ checksum "package.json" }}
  - &install_aws_cli
    run:
      name: Installing AWS CLI
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install -y awscli
        sudo apt-get install -y python3-pip python-dev build-essential
  - &build_project
    run:
      name: Build project
      command: |
        npm run build
        cd build
        zip ../build.zip -r * .[^.]*
        echo "Build successful"

jobs:
  build:
    executor: app-executor
    steps:
      - checkout
      - *show_current_branch
      - *restore_cache
      - run:
          name: Create artifacts folder
          command: mkdir -p artifacts
      - *install_dependencies
      - *save_cache
      - run:
          name: Copy infrastructure folder
          command: cp -r infrastructure artifacts/infrastructure
      - persist_to_workspace:
          root: .
          paths:
            - artifacts

  terraform-validate:
    executor: terraform-executor
    steps:
      - checkout
      - *show_current_branch
      - run:
          name: Terraform validate and format
          command: |
            cd infrastructure/   
            terraform init --backend=false
            terraform validate
            terraform fmt --check

  terraform-plan-and-apply:
    executor: terraform-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - *show_current_branch
      - run:
          name: Terraform plan
          command: |
            cd artifacts/infrastructure/   
            terraform init
            terraform select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terrafprm plan
      - run:
          name: Terraform apply
          command: |
            cd artifacts/infrastructure/
            terraform select ${CIRCLE_BRANCH}
            terraform apply --auto-approve
            terraform output cinema_app_bucket_name > ../cinema_bucket_name.txt
      - persist_to_workspace:
        root: .
        paths:
          - artifacts

  deploy-to-aws-s3:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - *show_current_branch
      - *install_aws_cli
      - *install_dependencies
      - *build_project
      - run:
          name: Deploy to AWS s3
          command: |
            AWS_BUCKET_NAME=$( cat artifacts/cinema_bucket_name.txt | sed 's/\"//g' )
            echo $AWS_BUCKET_NAME
            if [ "${CIRCLE_BRANCH}" == "main" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_NAME} --delete
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_NAME} --delete
            else
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_NAME} --delete
            fi

  terraform-destroy:
    executor: terraform-executor
    steps:
      - checkout
      - *show_current_branch
      - run:
          name: Terraform destroy
          command: |
            cd infrastructure/
            terraform init
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terraform destroy --auto-approve

workflows:
  build_and_deploy:
    jobs:
      - build
      - terraform-validate:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - main
      - terraform-plan-and-apply:
          requires:
            - terraform-validate
          filters:
            branches:
              only:
                - develop
                - staging
                - main
      - deploy-to-aws-s3:
          requires:
            - terraform-plan-and-apply
          filters:
            branches:
              only:
                - develop
                - staging
                - main
      - hold:
          type: approval
          requires:
            - deploy-to-aws-s3
      - terraform-destroy:
          requires:
            - hold
          filters:
            branches:
              only:
                - develop
                - staging
                - main